name: Build production documentation

on:
  push:
    branches:
      - main

env:
  INSTANCE: 'Writerside/writerside'
  DOCKER_VERSION: '243.21565'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)"
    
      - name: Check and Print Tag
        run: |
          if [ -z "${{ steps.get_tag.outputs.tag }}" ]; then
            echo "Tag is empty. Exiting."
            exit 1
          else
            echo "Latest Tag: ${{ steps.get_tag.outputs.tag }}"
          fi

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/${{ env.ARTIFACT }}
            artifacts/report.json
            artifacts/${{ env.ALGOLIA_ARTIFACT }}
          retention-days: 7

  deploy:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Check Secrets Access
          run: |
            if [ -z "${{ secrets.REMOTE_HOST }}" ]; then
              echo "REMOTE_HOST is not accessible."
              exit 1
            else
              echo "REMOTE_HOST is accessible."
            fi
            
            if [ -z "${{ secrets.REMOTE_USER }}" ]; then
              echo "REMOTE_USER is not accessible."
              exit 1
            else
              echo "REMOTE_USER is accessible."
            fi
            
            if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
              echo "SSH_PRIVATE_KEY is not accessible."
              exit 1
            else
              echo "SSH_PRIVATE_KEY is accessible."
            fi
    
        - name: Get Latest Tag
          id: get_tag
          run: echo "::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)"
        
        - name: Check and Print Tag
          run: |
            if [ -z "${{ steps.get_tag.outputs.tag }}" ]; then
              echo "Tag is empty. Exiting."
              exit 1
            else
              echo "Latest Tag: ${{ steps.get_tag.outputs.tag }}"
            fi        
        
        - name: Set environment variables
          run: |
            echo "TAG=${{ steps.get_tag.outputs.tag }}" >> $GITHUB_ENV
            echo "DIR=/var/www/writerside_doc/versions/${{ steps.get_tag.outputs.tag }}" >> $GITHUB_ENV

        - name: Install SSH key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            known_hosts: "~/.ssh/known_hosts"

        - name: Generate auth hosts
          run: ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
        
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: docs
            path: artifacts
        
        - name: Upload Artifact
          uses: easingthemes/ssh-deploy@main
          with:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SOURCE: "artifacts"
            REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
            REMOTE_USER: ${{ secrets.REMOTE_USER }}
            TARGET: "$HOME"
        