name: Deploy documentation on server

on:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)"
      
      - name: Check and Print Tag
        run: |
          if [ -z "${{ steps.get_tag.outputs.tag }}" ]; then
            echo "Tag is empty. Exiting."
            exit 1
          else
            echo "Latest Tag: ${{ steps.get_tag.outputs.tag }}"
          fi        
      
      - name: Set environment variables
        run: |
          echo "TAG=${{ steps.get_tag.outputs.tag }}" >> $GITHUB_ENV
          echo "DIR=/var/www/writerside_doc/versions/${{ steps.get_tag.outputs.tag }}" >> $GITHUB_ENV

      - name: Check structure on server
        id: prepare_server
        uses: garygrossgarten/github-action-ssh@release
        env: 
          DIR: ${{ env.DIR }}
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.REMOTE_USER }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
          command: |        
            # Проверяем наличие директории
            if [ -d "$DIR" ]; then
              echo "Директория $DIR существует. Очищаем содержимое."
              rm -rf ${DIR}/*
            else
              echo "Директория $DIR не существует. Создаём директорию."
              mkdir -p $DIR
            fi
            
            # Загружаем артифакт на сервер
            echo "Загружаем артифакт в $DIR"
            exit 0  # Выходим из SSH сессии перед загрузкой файла
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts
      
      - name: Upload Artifact
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: "artifacts"
          REMOTE_HOST: ${{ env.HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ env.DIR }}
    
        